import{_ as e,c as a,a as p,o as O}from"./app-CB-nSvZQ.js";const o={};function n(r,t){return O(),a("div",null,t[0]||(t[0]=[p('<h1 id="po、do、dto、vo" tabindex="-1"><a class="header-anchor" href="#po、do、dto、vo"><span>PO、DO、DTO、VO</span></a></h1><p>DTO(Data Transfer Object)</p><p>数据传输对象,原先是为分布式提供粗粒度的数据实体,减少调用次数来提升性能和降低网络压力。</p><p><strong>VO(view object)</strong></p><p>可视层对象,用于给前端显示的对象。(只传递有需要的参数以保障数据安全)</p><p><strong>DO(Domain Object):</strong></p><p>领域对象,一般和数据中的表结构对应。</p><p><strong>PO(Persistent Object)</strong>:持久化对象,是一种 o/r 映射关系,可以看成是数据库表到 java 对象的映射。</p><h2 id="概括" tabindex="-1"><a class="header-anchor" href="#概括"><span>概括</span></a></h2><p>DTO:前端给后端传递的数据</p><p>VO:后端给前端传递的数据</p><p>DO:数据库表结构</p><p>PO:数据库表结构到 JAVA 的映射类</p><p>一般我们使用 Mybatis 建的类为 PO,控制器接受到前端发来的参数为 DTO,给前端发送的安全的数据为 VO。如果数据类不做映射处理关系时 PO=DO</p>',14)]))}const c=e(o,[["render",n]]),i=JSON.parse('{"path":"/%E6%9D%82%E9%A1%B9/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/PO%E3%80%81DO%E3%80%81DTO%E3%80%81VO.html","title":"PO、DO、DTO、VO","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"概括","slug":"概括","link":"#概括","children":[]}],"git":{},"filePathRelative":"杂项/软件设计/PO、DO、DTO、VO.md"}');export{c as comp,i as data};

import{_ as s,c as n,a as l,o as i}from"./app-B2W6m6qX.js";const a={};function d(r,e){return i(),n("div",null,e[0]||(e[0]=[l(`<h1 id="链接库" tabindex="-1"><a class="header-anchor" href="#链接库"><span>链接库</span></a></h1><h3 id="查询一个动态库的位置和版本" tabindex="-1"><a class="header-anchor" href="#查询一个动态库的位置和版本"><span>查询一个动态库的位置和版本</span></a></h3><p>如果你不记得动态库的准确名字，可以通过以下几个方式来查找：</p><ol><li>使用 find 命令</li></ol><p>使用 find 命令可以扫描整个系统来查找动态库，例如：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">find / -name &quot;*libraryname*&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，libraryname 是动态库的模糊名称，使用通配符*可以匹配包含该名称的所有文件。</p><p>但需要注意的是，由于扫描整个系统可能非常慢，因此如果知道动态库应该在哪个目录下，最好直接到该目录下搜索。</p><ol><li>使用 locate 命令</li></ol><p>如果你的系统已经安装了 mlocate 工具，可以使用 locate 命令来快速查找文件。例如：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">locate libraryname</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令将查找包含 libraryname 的所有文件，并显示它们的路径。</p><p>需要注意的是，由于 <strong>mlocate 工具是基于数据库的，因此可能需要先使用 updatedb</strong> 命令更新数据库。</p><ol><li>在 LD_LIBRARY_PATH 中查找</li></ol><p>如果你已经设置了 LD_LIBRARY_PATH 环境变量，可以使用 which 命令来查找该环境变量中包含的所有动态库。例如：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">echo $LD_LIBRARY_PATH</span>
<span class="line">/usr/local/lib:/usr/lib</span>
<span class="line"></span>
<span class="line">which -a libraryname</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将列出 LD_LIBRARY_PATH 所包含的所有目录中的 libraryname 动态库的路径。</p><p>需要注意的是，如果动态库没有被正确加载，可能需要重新设置 LD_LIBRARY_PATH 环境变量或将动态库放到操作系统默认搜索路径下。</p><p>要查看一个动态库的版本，可以使用命令 <code>ldd</code> 和 <code>objdump</code>。</p><ol><li>使用 ldd 命令</li></ol><p>可以使用 <code>ldd</code> 命令列出一个动态库的依赖库，并且开头几行将包含动态库的版本信息。</p><p>例如，查看 <code>libssl.so</code> 动态库的版本：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">ldd --version</span>
<span class="line">ldd (Ubuntu GLIBC 2.33-0ubuntu5) 2.33</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一行是 <code>ldd</code> 命令的版本信息。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">ldd /usr/lib/x86_64-linux-gnu/libssl.so</span>
<span class="line">        linux-vdso.so.1 (0x00007ffd9ec3e000)</span>
<span class="line">        libcrypt.so.1 =&gt; /lib/x86_64-linux-gnu/libcrypt.so.1 (0x00007f9e896f9000)</span>
<span class="line">        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f9e894f5000)</span>
<span class="line">        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f9e892d7000)</span>
<span class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9e88e27000)</span>
<span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007f9e89b32000)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二行到第六行是 <code>libssl.so</code> 动态库所依赖的其它库的版本信息。</p><ol><li>使用 objdump 命令</li></ol><p>可以使用 <code>objdump</code> 命令查看一个动态库的符号表。符号表通常包含库的版本信息。</p><p>例如，查看 <code>libssl.so</code> 动态库的版本：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">objdump -p /usr/lib/x86_64-linux-gnu/libssl.so | grep &quot;SONAME&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将输出动态库的版本信息，例如：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">SONAME               libssl.so.1.1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，<code>SONAME</code> 是动态库版本信息的标记。该信息通常位于动态库头部，可以通过 <code>objdump</code> 输出的方式查看。</p><p>注意，不是所有的动态库都包含版本信息。如果动态库不包含版本信息，则无法使用上述方法查看版本。</p>`,34)]))}const t=s(a,[["render",d]]),c=JSON.parse('{"path":"/Cpp/%E9%93%BE%E6%8E%A5%E5%BA%93.html","title":"链接库","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"查询一个动态库的位置和版本","slug":"查询一个动态库的位置和版本","link":"#查询一个动态库的位置和版本","children":[]}],"git":{},"filePathRelative":"Cpp/链接库.md"}');export{t as comp,c as data};

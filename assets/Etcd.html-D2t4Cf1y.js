import{_ as a,c as t,a as p,o as l}from"./app-CUeCZAbe.js";const n={};function r(d,e){return l(),t("div",null,e[0]||(e[0]=[p('<h1 id="etcd" tabindex="-1"><a class="header-anchor" href="#etcd"><span>Etcd</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>etcd 是一个高可用的分布式键值存储系统，由 CoreOS 团队于 2013 年发起，采用 Go 语言实现。它主要用于配置管理、服务发现和分布式协调，广泛应用于 Kubernetes 等云原生系统中。</p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><p>• 简单：安装配置简单，提供 HTTP API 进行交互。</p><p>• 安全：支持 SSL 证书验证。</p><p>• 快速：单实例支持每秒 2k+ 读操作。</p><p>• 可靠：基于 Raft 算法，保证数据的一致性和高可用性。</p><p>• 高可用：支持多节点集群，容错能力强。</p><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><p>• Raft 协议：etcd 使用 Raft 算法保证数据一致性，包含 Leader、Follower 和 Candidate 三种角色。<a href="https://d4m8ldfqqc.feishu.cn/wiki/XK9vwYl7giqKIwkJEUTcfZ9PnKh" target="_blank" rel="noopener noreferrer">Raft 算法</a></p><p>• Node：一个 Raft 状态机实例。</p><p>• Member：一个 etcd 实例，管理一个 Node 并为客户端提供服务。</p><p>• Cluster：由多个 Member 组成的协同工作集群。</p><p>• WAL：预写式日志，用于持久化存储。</p><p>• Snapshot：快照，防止 WAL 文件过多。</p><h2 id="数据读写" tabindex="-1"><a class="header-anchor" href="#数据读写"><span>数据读写</span></a></h2><p>• 读写顺序：所有数据流向从 Leader 流向 Follower，保证强一致性。</p><p>• Leader 选举：通过 Raft 协议选举 Leader，Leader 处理所有数据提交。</p><p>• 数据写入：写入请求被 Leader 处理并分发给多数节点后，视为成功写入。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p>• 服务注册与发现：用于分布式系统中的服务注册与发现。</p><p>• 消息发布与订阅：支持消息的发布与订阅机制。</p><p>• 分布式锁：基于 Raft 算法实现分布式锁。</p><p>• 配置管理：存储和管理分布式系统的配置信息。</p><h2 id="安装与部署" tabindex="-1"><a class="header-anchor" href="#安装与部署"><span>安装与部署</span></a></h2><p>• 单机部署：适用于开发和测试环境。</p><p>• 集群部署：推荐至少 3 个节点，保证高可用性和容错能力。</p><h2 id="运维与监控" tabindex="-1"><a class="header-anchor" href="#运维与监控"><span>运维与监控</span></a></h2><p>• 备份与恢复：使用 <code>etcdctl snapshot</code> 命令进行备份和恢复。</p><p>• 健康检查：定期检查集群健康状态，确保高可用性。</p><p>• 性能优化：针对环境情况调整选举超时时间，使用高性能磁盘。</p>',32)]))}const h=a(n,[["render",r]]),c=JSON.parse('{"path":"/%E4%BA%91%E5%8E%9F%E7%94%9F/Etcd.html","title":"Etcd","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":2,"title":"数据读写","slug":"数据读写","link":"#数据读写","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"安装与部署","slug":"安装与部署","link":"#安装与部署","children":[]},{"level":2,"title":"运维与监控","slug":"运维与监控","link":"#运维与监控","children":[]}],"git":{},"filePathRelative":"云原生/Etcd.md"}');export{h as comp,c as data};

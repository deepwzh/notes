import{_ as a,c as n,a as i,o as t}from"./app-CxmxnU5Q.js";const l="/wiki/%E6%9D%82%E9%A1%B9/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/static/KYzFbdZb7oS3CyxBe8QcbRkEnBf.png",s="/wiki/%E6%9D%82%E9%A1%B9/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/static/O3X7bVkhAoMV6FxmxgGc69GLnMe.png",r="/wiki/%E6%9D%82%E9%A1%B9/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/static/K19zbju6RoQU26xNkA5cdC6Gn5g.png",h="/wiki/%E6%9D%82%E9%A1%B9/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/static/PWiQbeJvAoXPOlxGC6AcE2z8nYf.png",c="/wiki/%E6%9D%82%E9%A1%B9/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/static/OajPbScQrotRt0xo6lWcJYbMn6f.png",o="/wiki/%E6%9D%82%E9%A1%B9/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/static/R92MbnR1io1XO9xtO48cVBLznmb.png",p={};function d(g,e){return t(),n("div",null,e[0]||(e[0]=[i('<h1 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq"><span>RabbitMQ</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p><a href="https://github.com/rabbitmq/cluster-operator" target="_blank" rel="noopener noreferrer">https://github.com/rabbitmq/cluster-operator</a></p><p><img src="'+l+'" alt=""></p><p>发布者发布消息，消息经由 Exchange 交换机，转发到对应的 Queue 队列上，再通过 Broker 与 Consumer 之间的 Connect Channel, 将消息发送给客户端</p><h3 id="exchange" tabindex="-1"><a class="header-anchor" href="#exchange"><span>Exchange</span></a></h3><ul><li><strong>Direct</strong> 类型：将消息中的 Routing key 与该 Exchange 关联的所有 Binding 中的 <strong>Routing key 进行比较</strong>，如果<strong>相等</strong>，则发送到该 Binding 对应的 Queue 中</li><li><strong>Topic</strong> 类型：将消息中的 Routing key 与该 Exchange 关联的所有 Binding 中的 <strong>Routing key 进行对比</strong>，如果<strong>匹配</strong>上了，则发送到该 Binding 对应的 Queue 中。</li><li><strong>Fanout</strong> 类型：直接将消息转发到所有 binding 的对应 queue 中，这种 exchange 在路由转发的时候，<strong>忽略 Routing key</strong>。</li><li>Headers 类型：将消息中的 headers 与该 Exchange 相关联的所有 Binging 中的参数进行匹配，如果匹配上了，则发送到该 Binding 对应的 Queue 中（不常用，作用于 Direct 类型类似）。</li></ul><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel"><span>Channel</span></a></h3><p>信道，信道是建立在真实的 TCP 连接内地虚拟连接，AMQP 命令都是通过信道发出去的，不管是发布消息，订阅队列，还是接受消息，这些动作都是在信道完成的。</p><p>因为对于操作系统来说建立和销毁 TCP 都是非常安昂贵的开销，所以引入信道的概念，以此来复用一条 TCP 连接</p><h2 id="工作模式" tabindex="-1"><a class="header-anchor" href="#工作模式"><span>工作模式</span></a></h2><h3 id="work-队列" tabindex="-1"><a class="header-anchor" href="#work-队列"><span>Work 队列</span></a></h3><p><img src="'+s+'" alt=""></p><p>多个消费者消费同一个队列，每条消息只能被一个消费者消费</p><h3 id="发布订阅" tabindex="-1"><a class="header-anchor" href="#发布订阅"><span>发布订阅</span></a></h3><p><img src="'+r+'" alt=""></p><p>多个消费者各自消费单独的队列</p><h3 id="路由模式" tabindex="-1"><a class="header-anchor" href="#路由模式"><span>路由模式</span></a></h3><p><img src="'+h+'" alt=""></p><p>在发布订阅的基础上，Exchange 可以根据推送到 Routing Key，转发到具有相同 Routing key 的队列中</p><h3 id="主题模式" tabindex="-1"><a class="header-anchor" href="#主题模式"><span>主题模式</span></a></h3><p><img src="'+c+'" alt=""></p><p>在发布订阅的基础上，Exchange 可以根据推送到 Routing Key，转发到具有匹配 Routing key 的队列中（支持正则）</p><h3 id="延时队列" tabindex="-1"><a class="header-anchor" href="#延时队列"><span>延时队列</span></a></h3><h3 id="死信队列" tabindex="-1"><a class="header-anchor" href="#死信队列"><span>死信队列</span></a></h3><h3 id="优先级队列" tabindex="-1"><a class="header-anchor" href="#优先级队列"><span>优先级队列</span></a></h3><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="消息持久化" tabindex="-1"><a class="header-anchor" href="#消息持久化"><span>消息持久化</span></a></h3><h3 id="消息顺序性" tabindex="-1"><a class="header-anchor" href="#消息顺序性"><span>消息顺序性</span></a></h3><p><img src="'+o+'" alt=""></p><p>顺序性分为发送消息顺序，队列中顺序和消费消息的顺序</p><p>Rabbitmq 只保证队列中消息的顺序（即单个消费者消费的顺序相同），多个消费者并不能保证</p><h3 id="队列属性" tabindex="-1"><a class="header-anchor" href="#队列属性"><span>队列属性</span></a></h3><h4 id="消息过期时间" tabindex="-1"><a class="header-anchor" href="#消息过期时间"><span>消息过期时间</span></a></h4><p>可以分别设置<strong>队列的消息过期时间</strong>和单个 <strong>消息的过期时间</strong></p><p>通过**队列属性(x-message-ttl)**设置消息过期时间。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>',37)]))}const b=a(p,[["render",d]]),u=JSON.parse('{"path":"/%E6%9D%82%E9%A1%B9/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ.html","title":"RabbitMQ","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"Exchange","slug":"exchange","link":"#exchange","children":[]},{"level":3,"title":"Channel","slug":"channel","link":"#channel","children":[]}]},{"level":2,"title":"工作模式","slug":"工作模式","link":"#工作模式","children":[{"level":3,"title":"Work 队列","slug":"work-队列","link":"#work-队列","children":[]},{"level":3,"title":"发布订阅","slug":"发布订阅","link":"#发布订阅","children":[]},{"level":3,"title":"路由模式","slug":"路由模式","link":"#路由模式","children":[]},{"level":3,"title":"主题模式","slug":"主题模式","link":"#主题模式","children":[]},{"level":3,"title":"延时队列","slug":"延时队列","link":"#延时队列","children":[]},{"level":3,"title":"死信队列","slug":"死信队列","link":"#死信队列","children":[]},{"level":3,"title":"优先级队列","slug":"优先级队列","link":"#优先级队列","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"消息持久化","slug":"消息持久化","link":"#消息持久化","children":[]},{"level":3,"title":"消息顺序性","slug":"消息顺序性","link":"#消息顺序性","children":[]},{"level":3,"title":"队列属性","slug":"队列属性","link":"#队列属性","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{},"filePathRelative":"杂项/消息队列/RabbitMQ.md"}');export{b as comp,u as data};

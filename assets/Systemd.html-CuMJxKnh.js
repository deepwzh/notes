import{_ as e,c as n,a,o as l}from"./app-Bli_YVjf.js";const i="/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/systemd/static/LZgsb3AdwojwnExPwAUczo5gnxf.png",r="/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/systemd/static/Tl1hbyumjo5XITx198jcf4TZnEf.png",t={};function p(d,s){return l(),n("div",null,s[0]||(s[0]=[a(`<h1 id="systemd" tabindex="-1"><a class="header-anchor" href="#systemd"><span>Systemd</span></a></h1><h1 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h1><h2 id="引子" tabindex="-1"><a class="header-anchor" href="#引子"><span>引子</span></a></h2><p>在 Linux 上进行安装某些服务之后，经常需要进行开启，关闭，重启的操作。</p><p>如我们在机器上安装了 sshd 服务,更改了配置需要让他生效，就需要进行重启</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">service</span> sshd restart</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在查资料的过程中，发现有的服务，是用另一套命令进行维护</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">systemctl sshd restart</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>因此想要更深入的了解一些</p><h2 id="systemd-系列图" tabindex="-1"><a class="header-anchor" href="#systemd-系列图"><span>systemd 系列图</span></a></h2><p><img src="`+i+`" alt=""></p><h2 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念"><span>相关概念</span></a></h2><h3 id="_1-号进程" tabindex="-1"><a class="header-anchor" href="#_1-号进程"><span>1 号进程</span></a></h3><p>1 号进程是 Linux 在内核加载后启动的第一个进程，会负责启动其他所需要的进程。</p><p>systemd 是作为一号进程存在，具体可以验证</p><h3 id="服务的两种管理方式" tabindex="-1"><a class="header-anchor" href="#服务的两种管理方式"><span>服务的两种管理方式</span></a></h3><h4 id="system-v-的方式" tabindex="-1"><a class="header-anchor" href="#system-v-的方式"><span>System V 的方式</span></a></h4><p>在/etc 目录下，以下的以下的子目录存放着服务脚本</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">drwxr-xr-x  <span class="token number">2</span> root   root    <span class="token number">4096</span> Mar <span class="token number">29</span> <span class="token number">10</span>:48 rc0.d</span>
<span class="line">drwxr-xr-x  <span class="token number">2</span> root   root    <span class="token number">4096</span> Mar <span class="token number">29</span> <span class="token number">10</span>:48 rc1.d</span>
<span class="line">drwxr-xr-x  <span class="token number">2</span> root   root    <span class="token number">4096</span> Mar <span class="token number">29</span> <span class="token number">10</span>:48 rc2.d</span>
<span class="line">drwxr-xr-x  <span class="token number">2</span> root   root    <span class="token number">4096</span> Mar <span class="token number">29</span> <span class="token number">10</span>:48 rc3.d</span>
<span class="line">drwxr-xr-x  <span class="token number">2</span> root   root    <span class="token number">4096</span> Mar <span class="token number">29</span> <span class="token number">10</span>:48 rc4.d</span>
<span class="line">drwxr-xr-x  <span class="token number">2</span> root   root    <span class="token number">4096</span> Mar <span class="token number">29</span> <span class="token number">10</span>:48 rc5.d</span>
<span class="line">drwxr-xr-x  <span class="token number">2</span> root   root    <span class="token number">4096</span> Mar <span class="token number">29</span> <span class="token number">10</span>:48 rc6.d</span>
<span class="line">drwxr-xr-x  <span class="token number">2</span> root   root    <span class="token number">4096</span> Mar <span class="token number">29</span> <span class="token number">10</span>:48 init.d</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>/etc/init.d 中存放着所有的服务脚本</li><li>不同运行级别，会按需添加/etc/init.d 下的具体服务</li><li>服务脚本一般包含 start, stop, restart 命令</li></ul><h4 id="systemd-的方式" tabindex="-1"><a class="header-anchor" href="#systemd-的方式"><span>Systemd 的方式</span></a></h4><p>较新的 Linux 发行版会采用 systemd 作为 1 号进程，进行服务管理，详见下文的阐述</p><h1 id="unit" tabindex="-1"><a class="header-anchor" href="#unit"><span>Unit</span></a></h1><h2 id="unit-类型" tabindex="-1"><a class="header-anchor" href="#unit-类型"><span>Unit 类型</span></a></h2><ul><li>Service unit：系统服务</li><li>Target unit：多个 Unit 构成的一个组</li><li>Device Unit：硬件设备</li><li>Mount Unit：文件系统的挂载点</li><li>Automount Unit：自动挂载点</li><li>Path Unit：文件或路径</li><li>Scope Unit：不是由 Systemd 启动的外部进程</li><li>Slice Unit：进程组</li><li>Snapshot Unit：Systemd 快照，可以切回某个快照</li><li>Socket Unit：进程间通信的 socket</li><li>Swap Unit：swap 文件</li><li>Timer Unit：定时器</li></ul><p>常用的是 Service Unit，表示一个系统服务</p><p>Target 是 Unit 的打包，与传统的 Run Level 概念类似,即一次启动多个服务</p><h1 id="服务管理" tabindex="-1"><a class="header-anchor" href="#服务管理"><span>服务管理</span></a></h1><h2 id="服务查看" tabindex="-1"><a class="header-anchor" href="#服务查看"><span>服务查看</span></a></h2><p>查看所有的服务</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">systemctl list-unit-files <span class="token operator">--</span><span class="token function">type</span>=service</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="服务创建" tabindex="-1"><a class="header-anchor" href="#服务创建"><span>服务创建</span></a></h2><p>可以在/etc/systemd/system 或者/lib/systemd/system 中仿照格式创建.service 文件</p><h3 id="服务最简模板" tabindex="-1"><a class="header-anchor" href="#服务最简模板"><span>服务最简模板</span></a></h3><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line"><span class="token namespace">[Unit]</span></span>
<span class="line">Description=简单的Foo服务</span>
<span class="line"></span>
<span class="line"><span class="token namespace">[Service]</span></span>
<span class="line">ExecStart=<span class="token operator">/</span>usr/sbin/foo-daemon</span>
<span class="line">WorkingDirectory=<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>XXX</span>
<span class="line"></span>
<span class="line"><span class="token namespace">[Install]</span></span>
<span class="line">WantedBy=multi-user<span class="token punctuation">.</span>target</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="稍微复杂的模板" tabindex="-1"><a class="header-anchor" href="#稍微复杂的模板"><span>稍微复杂的模板</span></a></h3><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line"><span class="token comment"># 注释</span></span>
<span class="line"><span class="token namespace">[Unit]</span></span>
<span class="line">Description=描述</span>
<span class="line">Documentation=文档命令</span>
<span class="line">After=network<span class="token punctuation">.</span>target nss-lookup<span class="token punctuation">.</span>target <span class="token comment"># 在哪些unit或target后启动</span></span>
<span class="line">Requires=<span class="token comment">#强依赖的unit列表，启动本unit时，也会启动Requires里面的</span></span>
<span class="line">Wants=<span class="token comment">#弱依赖的unit列表，启动本unit时，也会启动Requires里面的，且只有他们都启动成功时，本unit才成功</span></span>
<span class="line">Conflicts=<span class="token comment">#与这个模块有冲突的模块，如果列出的模块中有已经在运行的，这个服务就不能启动，反之亦然</span></span>
<span class="line"><span class="token namespace">[Service]</span></span>
<span class="line">EnvironmentFile=<span class="token operator">-</span><span class="token operator">/</span>etc/sysconfig/sshd <span class="token comment">#环境变量文件，-表示不存在不报错</span></span>
<span class="line"><span class="token function">Type</span>=simple <span class="token comment"># 启动类型，可设置：simple(默认)，exec，forking，oneshot，dbus，notify，idle</span></span>
<span class="line">ExecStart：定义启动进程时执行的命令</span>
<span class="line">ExecReload：重启服务时执行的命令</span>
<span class="line">ExecStop：停止服务时执行的命令</span>
<span class="line">ExecStartPre：启动服务之前执行的命令</span>
<span class="line">ExecStartPost：启动服务之后执行的命令</span>
<span class="line">ExecStopPost：停止服务之后执行的命令</span>
<span class="line"></span>
<span class="line">User=以什么用户执行命令</span>
<span class="line"></span>
<span class="line">KillMode：定义 Systemd 如何停止服务</span>
<span class="line">Restart：定义了退出后，Systemd 的重启方式。</span>
<span class="line">RestartSec：表示 Systemd 重启服务之前，需要等待的秒数</span>
<span class="line"></span>
<span class="line"><span class="token namespace">[Install]</span></span>
<span class="line">WantedBy=multi-user<span class="token punctuation">.</span>target</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>KillMode：</p><p>可以设置的值如下：</p><ul><li>control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉</li><li>process：只杀主进程</li><li>mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号</li><li>none：没有进程会被杀掉，只是执行服务的 stop 命令</li></ul><p>Restart:</p><ul><li>on-success：只有正常退出时（退出状态码为 0），才会重启</li><li>on-failure：非正常退出时（退出状态码非 0），包括被信号终止和超时，才会重启</li><li>on-abnormal：只有被信号终止和超时，才会重启</li><li>on-abort：只有在收到没有捕捉到的信号终止时，才会重启</li><li>on-watchdog：超时退出，才会重启</li><li>always：不管是什么退出原因，总是重启</li></ul><h3 id="服务启动顺序" tabindex="-1"><a class="header-anchor" href="#服务启动顺序"><span>服务启动顺序</span></a></h3><ul><li><code>After</code> 字段: 此 Unit 应该在其后启动</li><li><code>Before</code> 字段:此 Unit 应该在其前启动</li></ul><h3 id="服务依赖关系" tabindex="-1"><a class="header-anchor" href="#服务依赖关系"><span>服务依赖关系</span></a></h3><p><code>Wants</code> 字段: 弱依赖关系，若字段值对应的服务失败或停止，不影响服务本身</p><p><code>Requires</code> 字段：强依赖关系，若字段值对应的服务失败或停止，服务本身也要退出</p><h3 id="服务自启动" tabindex="-1"><a class="header-anchor" href="#服务自启动"><span>服务自启动</span></a></h3><p>以 nginx 为例，下述命令开启其自启动</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">sudo systemctl enable nginx<span class="token punctuation">.</span>service</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>下述命令关闭其自启动</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">sudo systemctl disable nginx<span class="token punctuation">.</span>service</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="服务操作" tabindex="-1"><a class="header-anchor" href="#服务操作"><span>服务操作</span></a></h2><p>查看服务状态</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">sudo</span> systemctl status nginx.service</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+r+`" alt=""></p><p>结果如上图，其中</p><p>Loaded 列的 enabled 表示其开启自启动，disable 表示开启不自启动</p><p>Active 表示进程状态:</p><ul><li>Active 正在运行</li></ul><p>最下方会显示其日志，所有被 systemd 管理的日志，错误数据与标准输出都会被收集，也可以使用 journalctl 查看更详细的日志</p><p>-b 0 表示只统计最后一次启动后的日志，去掉会显示历史的日志</p><p>-p 3 表示查看 error 或更高等级的日志</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">sudo</span> journalctl <span class="token parameter variable">-b</span> <span class="token number">0</span> <span class="token parameter variable">-p</span> <span class="token number">3</span> <span class="token parameter variable">-u</span> nginx.service</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="日志管理" tabindex="-1"><a class="header-anchor" href="#日志管理"><span>日志管理</span></a></h1><h2 id="命令概述" tabindex="-1"><a class="header-anchor" href="#命令概述"><span>命令概述</span></a></h2><p>journalctl [-b] 查看所有日志，默认显示本次启动的所有日志，基本不用，因为太多了；</p><p>journalctl -k 查看内核日志；</p><p>journalctl -u 查看指定服务的日志；</p><p>journalctl --since --until 查看指定时间的日志，时间格式为&quot;2020-05-13 13:14:00&quot;；</p><p>journalctl -n 指定显示最近的多少行，默认为 10 行；</p><p>journalctl -f 持续监控日志输出；</p><p>journal --no-pager 设置不分页显示；</p><p>journalctl -p 查看指定级别的日志；</p><p>其中等级</p><p>0: emerg 　　1: alert 　　2: crit 　　3: err 　　4: warning 　　5: notice 　　6: info 　　7: debug</p><p>journal -o 设置输出格式，可选：</p><p>cat: 只显示信息字段本身。 　　export: 适合传输或备份的二进制格式。 　　json: 标准 JSON，每行一个条目。 　　json-pretty: JSON 格式，适合人类阅读习惯。 　　json-sse: JSON 格式，经过打包以兼容 server-sent 事件。 　　short: 默认 syslog 类输出格式。 　　short-iso: 默认格式，强调显示 ISO 8601 挂钟时间戳。 　　short-monotonic: 默认格式，提供普通时间戳。 　　short-precise: 默认格式，提供微秒级精度。 　　verbose: 显示该条目的全部可用 journal 字段，包括通常被内部隐藏的字段。</p><h2 id="日志查看" tabindex="-1"><a class="header-anchor" href="#日志查看"><span>日志查看</span></a></h2><h3 id="系统日志查看" tabindex="-1"><a class="header-anchor" href="#系统日志查看"><span>系统日志查看</span></a></h3><p>-k 代表查看系统日志，同 dmesg</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">sudo journalctl -k</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查看之前的-oom-killer-日志" tabindex="-1"><a class="header-anchor" href="#查看之前的-oom-killer-日志"><span>查看之前的 oom killer 日志</span></a></h3><p>-b -1，代表是上次重启周期期间的日志，以此类推</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">sudo journalctl -b -2 -kg &#39;killed process&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查看服务的日志" tabindex="-1"><a class="header-anchor" href="#查看服务的日志"><span>查看服务的日志</span></a></h3><p>如，查看 ssh 启动的日志</p><p>-g 代表用后边的词进行 grep 操作</p><p>-u 后边跟着服务名</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">sudo journalctl -u ssh.service -g &quot;Started&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查看系统的重启情况" tabindex="-1"><a class="header-anchor" href="#查看系统的重启情况"><span>查看系统的重启情况</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">sudo journalctl --list-boots</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p>json-pretty 可以用 json 格式输出日志</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">sudo journalctl -o json-pretty</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="日志清理" tabindex="-1"><a class="header-anchor" href="#日志清理"><span>日志清理</span></a></h2><h3 id="手动清理" tabindex="-1"><a class="header-anchor" href="#手动清理"><span>手动清理</span></a></h3><p>方法 1：强制删除</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">rm -rf /var/log/journal/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>方法 2: 使用 journalctl 做清理</p><ul><li>查看日志磁盘占用</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">sudo journalctl --disk-usage</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>轮转归档日志文件,便于后续清理</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">sudo</span> journalctl <span class="token parameter variable">--rotate</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>清理指定时间之前的日志</li></ul><p>后缀支持 d(天), h(时), s(秒)</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">sudo</span> journalctl --vacuum-time<span class="token operator">=</span>7d</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>清理指定大小之外的日志（即保留最近 xx 大小的日志）</li></ul><p>后缀支持 G(GB), M(MB), K(KB)</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">sudo journalctl --vacuum-size=1G</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>清理指定数目外的日志（即保留最近的 n 个日志）</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">sudo journalctl --vacuum-files=5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="自动清理" tabindex="-1"><a class="header-anchor" href="#自动清理"><span>自动清理</span></a></h3><p>修改 <strong>/etc/systemd/journald.conf</strong> 配置文件</p><p>常用参数如下</p><p>SystemMaxUse=：指定 journal 所能使用的最高持久存储容量。 SystemKeepFree=：指定 journal 在添加新条目时需要保留的剩余空间。 SystemMaxFileSize=：控制单一 journal 文件大小，符合要求方可被转为持久存储。 RuntimeMaxUse=：指定易失性存储中的最大可用磁盘容量（/run 文件系统之内）。 RuntimeKeepFree=：指定向易失性存储内写入数据时为其它应用保留的空间量（/run 文件系统之内）。 RuntimeMaxFileSize=：指定单一 journal 文件可占用的最大易失性存储容量（/run 文件系统之内）</p><p>设置后需要重载配置</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">sudo systemctl daemon-reload</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://www.liangzl.com/get-article-detail-164210.html" target="_blank" rel="noopener noreferrer">https://www.liangzl.com/get-article-detail-164210.html</a></p><p><a href="https://man7.org/linux/man-pages/man8/systemd-oomd.8.html" target="_blank" rel="noopener noreferrer">https://man7.org/linux/man-pages/man8/systemd-oomd.8.html</a></p><p><a href="http://www.jinbuguo.com/systemd/systemd.service.html" target="_blank" rel="noopener noreferrer">http://www.jinbuguo.com/systemd/systemd.service.html</a></p><p><a href="https://cloud.tencent.com/developer/article/1516125" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/developer/article/1516125</a></p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units" target="_blank" rel="noopener noreferrer">https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units</a></p><p><a href="http://www.jinbuguo.com/systemd/systemd.service.html" target="_blank" rel="noopener noreferrer">http://www.jinbuguo.com/systemd/systemd.service.html</a> systemd 中文翻译文档</p><p><a href="https://www.freedesktop.org/software/systemd/man/systemd.service.html" target="_blank" rel="noopener noreferrer">https://www.freedesktop.org/software/systemd/man/systemd.service.html</a> systemd 官方英文文档</p>`,126)]))}const o=e(t,[["render",p]]),u=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/systemd/Systemd.html","title":"Systemd","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"引子","slug":"引子","link":"#引子","children":[]},{"level":2,"title":"systemd 系列图","slug":"systemd-系列图","link":"#systemd-系列图","children":[]},{"level":2,"title":"相关概念","slug":"相关概念","link":"#相关概念","children":[{"level":3,"title":"1 号进程","slug":"_1-号进程","link":"#_1-号进程","children":[]},{"level":3,"title":"服务的两种管理方式","slug":"服务的两种管理方式","link":"#服务的两种管理方式","children":[]}]},{"level":2,"title":"Unit 类型","slug":"unit-类型","link":"#unit-类型","children":[]},{"level":2,"title":"服务查看","slug":"服务查看","link":"#服务查看","children":[]},{"level":2,"title":"服务创建","slug":"服务创建","link":"#服务创建","children":[{"level":3,"title":"服务最简模板","slug":"服务最简模板","link":"#服务最简模板","children":[]},{"level":3,"title":"稍微复杂的模板","slug":"稍微复杂的模板","link":"#稍微复杂的模板","children":[]},{"level":3,"title":"服务启动顺序","slug":"服务启动顺序","link":"#服务启动顺序","children":[]},{"level":3,"title":"服务依赖关系","slug":"服务依赖关系","link":"#服务依赖关系","children":[]},{"level":3,"title":"服务自启动","slug":"服务自启动","link":"#服务自启动","children":[]}]},{"level":2,"title":"服务操作","slug":"服务操作","link":"#服务操作","children":[]},{"level":2,"title":"命令概述","slug":"命令概述","link":"#命令概述","children":[]},{"level":2,"title":"日志查看","slug":"日志查看","link":"#日志查看","children":[{"level":3,"title":"系统日志查看","slug":"系统日志查看","link":"#系统日志查看","children":[]},{"level":3,"title":"查看之前的 oom killer 日志","slug":"查看之前的-oom-killer-日志","link":"#查看之前的-oom-killer-日志","children":[]},{"level":3,"title":"查看服务的日志","slug":"查看服务的日志","link":"#查看服务的日志","children":[]},{"level":3,"title":"查看系统的重启情况","slug":"查看系统的重启情况","link":"#查看系统的重启情况","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]},{"level":2,"title":"日志清理","slug":"日志清理","link":"#日志清理","children":[{"level":3,"title":"手动清理","slug":"手动清理","link":"#手动清理","children":[]},{"level":3,"title":"自动清理","slug":"自动清理","link":"#自动清理","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{},"filePathRelative":"操作系统/Linux/systemd/Systemd.md"}');export{o as comp,u as data};

import{_ as a,c as n,a as s,o as t}from"./app-EGhza7Qr.js";const c={};function i(l,e){return t(),n("div",null,e[0]||(e[0]=[s(`<h1 id="cmake-库查找" tabindex="-1"><a class="header-anchor" href="#cmake-库查找"><span>cmake 库查找</span></a></h1><h2 id="find-package" tabindex="-1"><a class="header-anchor" href="#find-package"><span>find_package</span></a></h2><p><code>find_package</code> 命令用于在系统上查找位于 CMake 模块路径中的库并导入其设置。对于许多常用的开源库，CMake 都提供了预定义模块，其中包括库的搜索逻辑和导入所需的其他设置。</p><p>默认导入位置：/usr/local/lib/cmake/</p><p>详细配置参加文档：<a href="https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html" target="_blank" rel="noopener noreferrer">cmake-modules(7) ‒ CMake 3.26.3 Documentation</a></p><p>该命令有几种模式可用于搜索软件包：</p><h3 id="模式" tabindex="-1"><a class="header-anchor" href="#模式"><span>模式</span></a></h3><p>find_package 支持多种模式</p><h4 id="模块模式" tabindex="-1"><a class="header-anchor" href="#模块模式"><span><strong>模块模式</strong></span></a></h4><p>在此模式下，CMake 会搜索名为 <code>Find&lt;PackageName&gt;.cmake</code> 的文件，首先查找 CMAKE_MODULE_PATH 中列出的位置，然后在 CMake 安装提供的查找模块中查找。如果找到该文件，则由 CMake 读取和处理。它负责查找软件包、检查版本并生成任何所需消息。某些 Find 模块对版本控制提供了有限或没有支持；请检查 Find 模块的文档。</p><p>通常情况下，<code>Find&lt;PackageName&gt;.cmake</code> 文件<strong>不是由软件包本身提供的。相反，它通常是由一些外部因素（如操作系统、CMake 本身或甚至调用 find_package()命令的项目）提供</strong>的。作为外部提供者，Find Modules 往往具有启发性，并容易过时。它们通常会搜索特定库、文件和其他软件包工件。</p><p>只有基本命令签名支持模块模式。</p><h4 id="配置模式" tabindex="-1"><a class="header-anchor" href="#配置模式"><span><strong>配置模式</strong></span></a></h4><p>在此模式下，CMake 会搜索名为 <code>&lt;lowercasePackageName&gt;-config.cmake</code> 或 <code>&lt;PackageName&gt;Config.cmake</code> 的文件。如果指定了版本详细信息（请参见“配置方式版本选择”以获取这些单独版本文件使用说明），还将寻找 <code>&lt;lowercasePackageName&gt;-config-version.cmake</code> 或 <code>&lt;PackageName&gt;ConfigVersion.cmake</code> 文件。</p><p>在配置方式下，可以向该命令给出要作为软件包名称搜索的名称列表。CMake 搜索配置和版本文件的位置比模块模式要复杂得多（请参见“配置方式搜索过程”）。</p><p><strong>配置和版本文件通常作为软件包的一部分安装</strong>，因此它们往往比 Find Modules 更可靠。它们通常包含有关软件包内容的直接知识，因此在配置或版本文件本身中不需要进行任何搜索或启发式操作。</p><p>基本命令签名和完整命令签名都支持配置模式。</p><h4 id="fetchcontent-重定向模式" tabindex="-1"><a class="header-anchor" href="#fetchcontent-重定向模式"><span><strong>FetchContent 重定向模式</strong></span></a></h4><p>自 3.24 版起：可以将对 find_package() 的调用内部重定向到由 FetchContent 模块提供的一个软件包。对于调用者而言，行为类似于配置方式，但是跳过了搜索逻辑并且不使用组件信息。有关详细信息，请参见 FetchContent_Declare() 和 FetchContent_MakeAvailable() 。</p><h2 id="与其他包管理器集成" tabindex="-1"><a class="header-anchor" href="#与其他包管理器集成"><span>与其他包管理器集成</span></a></h2><h3 id="conan" tabindex="-1"><a class="header-anchor" href="#conan"><span>conan</span></a></h3><p>使用 CMakeDeps 生成器, 可以生成更现代的 XXXConfig.cmake 文件，支持 CMake 的 <code>find_package</code> 和 <code>target_link_libraries</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>generators<span class="token punctuation">]</span></span>
<span class="line">CMakeDeps</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以通过 CMake 直接使用了</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">find_package<span class="token punctuation">(</span>Boost REQUIRED<span class="token punctuation">)</span></span>
<span class="line">target_link_libraries<span class="token punctuation">(</span>my_target PRIVATE boost::boost<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://blog.csdn.net/weixin_39766005/article/details/122606788" target="_blank" rel="noopener noreferrer">CMake I 细谈 find_package 函数_烫青菜的博客-CSDN 博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/97369704" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/97369704</a></p>`,28)]))}const p=a(c,[["render",i]]),o=JSON.parse('{"path":"/Cpp/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/Cmake/cmake%E5%BA%93%E6%9F%A5%E6%89%BE.html","title":"cmake 库查找","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"find_package","slug":"find-package","link":"#find-package","children":[{"level":3,"title":"模式","slug":"模式","link":"#模式","children":[]}]},{"level":2,"title":"与其他包管理器集成","slug":"与其他包管理器集成","link":"#与其他包管理器集成","children":[{"level":3,"title":"conan","slug":"conan","link":"#conan","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{},"filePathRelative":"Cpp/构建工具/Cmake/cmake库查找.md"}');export{p as comp,o as data};

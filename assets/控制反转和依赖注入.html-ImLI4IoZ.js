import{_ as a,c as n,a as l,o as i}from"./app-Cj9cApIO.js";const t={};function h(r,e){return i(),n("div",null,e[0]||(e[0]=[l('<h1 id="控制反转和依赖注入" tabindex="-1"><a class="header-anchor" href="#控制反转和依赖注入"><span>控制反转和依赖注入</span></a></h1><h2 id="简而言之" tabindex="-1"><a class="header-anchor" href="#简而言之"><span>简而言之</span></a></h2><ul><li>控制反转(Inversion Of Control, IOC)是一种思想, 依赖注入(Dependency Injection, DI) 是实现控制反转的一种实现方法</li><li>通过第三方控制依赖，具体体现为通过构造函数，属性或者工厂方法，将对象注入进去</li><li>上下层通过控制反转，将依赖的初始化提升了一层；如果原本不止两层，可以通过相同的方式将依赖的初始化提升到最高层，然后从最高层进行初始化</li></ul><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入"><span>依赖注入</span></a></h3><h3 id="控制反转" tabindex="-1"><a class="header-anchor" href="#控制反转"><span>控制反转</span></a></h3><h3 id="ioc-容器" tabindex="-1"><a class="header-anchor" href="#ioc-容器"><span>IOC 容器</span></a></h3><p>随着 DI 的频繁使用，要实现 IOC，会有很多重复代码，甚至随着技术的发展，有更多新的实现方法和方案，那么有人就把这些实现 IOC 的代码打包成组件或框架，来避免人们重复造轮子。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://www.zhihu.com/question/32108444" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/question/32108444</a></p>',10)]))}const c=a(t,[["render",h]]),o=JSON.parse('{"path":"/%E6%9D%82%E9%A1%B9/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html","title":"控制反转和依赖注入","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简而言之","slug":"简而言之","link":"#简而言之","children":[]},{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"依赖注入","slug":"依赖注入","link":"#依赖注入","children":[]},{"level":3,"title":"控制反转","slug":"控制反转","link":"#控制反转","children":[]},{"level":3,"title":"IOC 容器","slug":"ioc-容器","link":"#ioc-容器","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{},"filePathRelative":"杂项/设计模式/控制反转和依赖注入.md"}');export{c as comp,o as data};

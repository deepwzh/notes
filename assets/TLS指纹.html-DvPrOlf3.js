import{_ as a,c as o,a as l,o as n}from"./app-Cj9cApIO.js";const r="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Https/static/UiZVblCUco5nz5x5H8ocEXQpnLd.png",t={};function c(s,e){return n(),o("div",null,e[0]||(e[0]=[l('<h1 id="tls-指纹" tabindex="-1"><a class="header-anchor" href="#tls-指纹"><span>TLS 指纹</span></a></h1><h2 id="计算-ja3" tabindex="-1"><a class="header-anchor" href="#计算-ja3"><span><strong>计算 ja3</strong></span></a></h2><p>字段：</p><ul><li><code>ClientHello 的版本</code></li><li><code>可接受的加密算法</code></li><li><code>扩展列表中的每一个 type 值</code></li><li><code>支持的椭圆曲线</code></li><li><code>支持的椭圆曲线格式</code></li></ul><p>然后，用 <code>,</code> 来分隔各个字段、用使用 <code>-</code> 来分隔各个字段中的各个值（十进制哦），将这些值串联在一起之后，计算 <code>MD5</code>，就是一个 ja3 了。注意，如果没有某个字段，则这些字段的值为空（连接用的逗号别忘了）。</p><p><img src="'+r+'" alt=""></p><h2 id="计算-ja3s" tabindex="-1"><a class="header-anchor" href="#计算-ja3s"><span>计算 ja3s</span></a></h2><p>ja3s 与 ja3 类似，提取 Server Hello 数据包中的：<code>Server Hello 版本</code>、<code>可接受的加密算法</code> 和 <code>扩展列表中的每一个 type 值</code>。然后同样用 <code>,</code> 来分隔各个字段、用使用 <code>-</code> 来分隔各个字段中的各个值（十进制哦），将这些值串联在一起之后，计算 <code>MD5</code>，就是一个 ja3s 了</p><h2 id="攻防" tabindex="-1"><a class="header-anchor" href="#攻防"><span>攻防</span></a></h2><h3 id="ja3-s-的误报率如何" tabindex="-1"><a class="header-anchor" href="#ja3-s-的误报率如何"><span>ja3(s) 的误报率如何？</span></a></h3><p>说实话，一般只有高度定制化的恶意软件会自己去实现 TLS，也是在这种情况下，ja3 指纹很可能对该恶意软件来说是唯一的。但是现在研发一般都会用第三方的库，不管是诸如 Python 的官方模块还是 win 下的组件，如果是这种情况，那么 ja3 会重复，误报率很高。这其实就是为什么要用 ja3s。</p><p>John Althouse 也举了个例子，翻译如下：</p><p>“...例如，MetaSploit 的 Meterpreter 和 CobaltStrike 的 Beacon 都使用 Windows 套接字来启动 TLS 通信。在 Windows 10 上，<code>JA3=72a589da586844d7f0818ce684948eea</code>（指定 IP 地址），<code>JA3=a0e9f5d64349fb13191bc781f81f42e1</code>（指定域名）。由于 Windows 上的其他普普通通的应用程序也使用相同的套接字，因此，我们很难识别其中的恶意通信。但是，Kali Linux 上的 C2 服务器对该客户端应用程序的响应方式与 Internet 上的普通服务器对该套接字的响应方式相比来说是独一无二的。因此，如果结合 ja3+ja3s，就能够识别这种恶意通信，而不用考虑目的地 IP、域名或证书等细节信息...”</p><p>总而言之，ja3 不是非常准确，所以要用 ja3s；ja3+ja3s 依旧不会非常准确，但是可以丰富我们检测威胁的维度，增加了攻击者的攻击成本，事实上现在很多 nids 都集成了 ja3(s) 的提取与匹配。</p><h3 id="伪造-ja3-的库" tabindex="-1"><a class="header-anchor" href="#伪造-ja3-的库"><span>伪造 ja3 的库</span></a></h3><ul><li><code>ja3transport</code>，golang 的库，这个的原理也是劫持 ClientHello 篡改，我认为不太靠谱。</li><li><code>curl-impersonate</code>，魔改的 curl，支持修改 ciphers 以及 curves。至于 extensions，我简单看了下作者的文章，他是通过使用与浏览器相同的 SSL 组件来模拟浏览器的 extensions，例如 Chrome 用的是 <code>BoringSSL</code>，FireFox 用的是 <code>NSS</code>，这个办法很聪明，在大多数场景下这个已经可以满足绕过的需要了，不过它就没办法模拟任意的 ja3 了。基于这个代码，还有一个 Python 版本的 <code>curl_cffi</code></li><li><code>CycleTLS</code>，有 golang 和 nodejs 的库，这个看代码是自己实现了 TLS 握手，实在是令人佩服。为了兼容 HTTP2 以及各种复杂的 TLS 参数，这个库目前还在艰难地维护当中， 不过只要不是特殊情况应该还是可以使用的。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://www.tr0y.wang/2020/06/28/ja3/" target="_blank" rel="noopener noreferrer">JA3(S)，简单而有效的 TLS 指纹 - Tr0y&#39;s Blog</a></p><p><a href="https://www.cnblogs.com/zichliang/p/17491838.html" target="_blank" rel="noopener noreferrer">逆向之 Ja3 指纹学习 - 始識 - 博客园 (</a><a href="https://www.cnblogs.com/zichliang/p/17491838.html" target="_blank" rel="noopener noreferrer">cnblogs.com</a><a href="https://www.cnblogs.com/zichliang/p/17491838.html" target="_blank" rel="noopener noreferrer">)</a></p><p><a href="https://xz.aliyun.com/t/13678?time__1311=GqmxuD9DgD00qGNKeeqBK%2B%2B8Dc7WDniEAWoD" target="_blank" rel="noopener noreferrer">JA 指纹识全系讲解（上） - 先知社区 (</a><a href="https://xz.aliyun.com/t/13678?time__1311=GqmxuD9DgD00qGNKeeqBK%2B%2B8Dc7WDniEAWoD" target="_blank" rel="noopener noreferrer">aliyun.com</a><a href="https://xz.aliyun.com/t/13678?time__1311=GqmxuD9DgD00qGNKeeqBK%2B%2B8Dc7WDniEAWoD" target="_blank" rel="noopener noreferrer">)</a></p>',20)]))}const d=a(t,[["render",c]]),p=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Https/TLS%E6%8C%87%E7%BA%B9.html","title":"TLS 指纹","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"计算 ja3","slug":"计算-ja3","link":"#计算-ja3","children":[]},{"level":2,"title":"计算 ja3s","slug":"计算-ja3s","link":"#计算-ja3s","children":[]},{"level":2,"title":"攻防","slug":"攻防","link":"#攻防","children":[{"level":3,"title":"ja3(s) 的误报率如何？","slug":"ja3-s-的误报率如何","link":"#ja3-s-的误报率如何","children":[]},{"level":3,"title":"伪造 ja3 的库","slug":"伪造-ja3-的库","link":"#伪造-ja3-的库","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{},"filePathRelative":"计算机网络/Https/TLS指纹.md"}');export{d as comp,p as data};

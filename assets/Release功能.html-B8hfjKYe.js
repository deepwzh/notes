import{_ as a,c as s,a as n,o as l}from"./app-Bli_YVjf.js";const t={};function o(r,e){return l(),s("div",null,e[0]||(e[0]=[n(`<h1 id="release-功能" tabindex="-1"><a class="header-anchor" href="#release-功能"><span>Release 功能</span></a></h1><h3 id="_2-自动生成-release" tabindex="-1"><a class="header-anchor" href="#_2-自动生成-release"><span>2. <strong>自动生成 Release</strong></span></a></h3><p>GitLab 的 Release 功能通过 Git 标签（Tag）标识代码版本，并支持以下自动化方式：</p><p>• <strong>通过 CI/CD 流水线自动创建 Release</strong>：在 <code>.gitlab-ci.yml</code> 中定义 <code>release</code> Job，调用 GitLab 的 Release API 或使用内置的 <code>release</code> 关键字，结合版本号（如 <code>CI_COMMIT_TAG</code>）自动生成 Release。</p><p>• <strong>示例配置</strong>：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">release_job</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">stage</span><span class="token punctuation">:</span> release</span>
<span class="line">  <span class="token key atrule">script</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">curl -X POST --header &quot;PRIVATE-TOKEN</span><span class="token punctuation">:</span> $CI_API_TOKEN&quot; &quot;$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases&quot; <span class="token punctuation">-</span>d &quot;tag_name=$CI_COMMIT_TAG<span class="token important">&amp;description=Auto-generated</span> release&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-自动生成-change-log" tabindex="-1"><a class="header-anchor" href="#_3-自动生成-change-log"><span>3. <strong>自动生成 Change Log</strong></span></a></h3><p>GitLab 提供了 <strong>Changelog API</strong> 和提交追踪器（Commit Trailers）来自动生成 Change Log：</p><p>• <strong>提交追踪器</strong>：在提交信息（Commit Message）末尾添加结构化标签（如 <code>Changelog: added</code>），GitLab 会解析这些信息并生成 Change Log。</p><p>• <strong>Changelog API</strong>：通过 API 获取两个版本间的提交记录，自动生成变更内容。例如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;PRIVATE-TOKEN: <span class="token variable">$CI_API_TOKEN</span>&quot;</span> <span class="token string">&quot;<span class="token variable">$CI_API_V4_URL</span>/projects/<span class="token variable">$CI_PROJECT_ID</span>/repository/changelog?version=<span class="token variable">$CI_COMMIT_TAG</span>&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-第三方工具支持" tabindex="-1"><a class="header-anchor" href="#_4-第三方工具支持"><span>4. <strong>第三方工具支持</strong></span></a></h3><p>• <code>**conventional-gitlab-releaser**</code>：基于约定式提交（如 Angular 规范）自动生成 Release 和 Change Log。</p><p>• <strong>极狐 GitLab</strong>：针对中国用户的 GitLab 发行版，提供了更简化的自动发布流程和文档支持。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>GitLab 的 CI/CD 流水线可以完全实现自动生成 Release 和 Change Log，具体通过：</p><ol><li>定义 <code>release</code> Job 或调用 API 创建 Release。</li><li>使用提交追踪器或 Changelog API 生成 Change Log。</li><li>可选结合第三方工具（如 <code>conventional-gitlab-releaser</code>）增强功能。</li></ol>`,17)]))}const p=a(t,[["render",o]]),c=JSON.parse('{"path":"/Devops/Gitlab/Release%E5%8A%9F%E8%83%BD.html","title":"Release 功能","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"2. 自动生成 Release","slug":"_2-自动生成-release","link":"#_2-自动生成-release","children":[]},{"level":3,"title":"3. 自动生成 Change Log","slug":"_3-自动生成-change-log","link":"#_3-自动生成-change-log","children":[]},{"level":3,"title":"4. 第三方工具支持","slug":"_4-第三方工具支持","link":"#_4-第三方工具支持","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"filePathRelative":"Devops/Gitlab/Release功能.md"}');export{p as comp,c as data};

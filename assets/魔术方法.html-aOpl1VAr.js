import{_ as n,c as e,a,o as l}from"./app-BNx8wf2R.js";const i={};function o(t,s){return l(),e("div",null,s[0]||(s[0]=[a(`<h1 id="魔术方法" tabindex="-1"><a class="header-anchor" href="#魔术方法"><span>魔术方法</span></a></h1><h3 id="一、构造与初始化" tabindex="-1"><a class="header-anchor" href="#一、构造与初始化"><span>一、构造与初始化</span></a></h3><ol><li><strong><code>init(self, ...)</code></strong></li><li>在对象实例化时自动调用，用于初始化实例属性（如设置默认值或接收参数）。</li><li>示例：</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> </span>
<span class="line">__init__</span>
<span class="line"><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token comment"># 初始化属性</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong><code>new(cls, ...)</code></strong></li><li>在对象创建前调用，负责实例的生成并返回实例对象（常用于单例模式或不可变类型定制）。</li></ol><hr><h3 id="二、对象表示与格式化" tabindex="-1"><a class="header-anchor" href="#二、对象表示与格式化"><span>二、对象表示与格式化</span></a></h3><ol><li><strong><code>str(self)</code></strong></li><li>定义对象的用户友好字符串表示（通过 <code>print()</code> 或 <code>str()</code> 调用）。</li><li>示例：</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> </span>
<span class="line">__str__</span>
<span class="line"><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span><span class="token string"> by </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>author<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong><code>repr(self)</code></strong></li><li>提供明确的开发调试信息（在交互式环境或 <code>repr()</code> 调用时生效）。</li></ol><hr><h3 id="三、属性管理" tabindex="-1"><a class="header-anchor" href="#三、属性管理"><span>三、属性管理</span></a></h3><ol><li>**<code>getattr(self, name)</code>**当访问不存在的属性时触发（用于动态属性生成或错误处理）。</li><li>**<code>setattr(self, name, value)</code>**拦截属性赋值操作（可添加校验逻辑或触发副作用）。</li><li>**<code>delattr(self, name)</code>**在删除属性时调用（如资源释放）。</li></ol><hr><h3 id="四、容器操作" tabindex="-1"><a class="header-anchor" href="#四、容器操作"><span>四、容器操作</span></a></h3><ol><li>**<code>len(self)</code>**返回容器长度（支持 <code>len()</code> 函数调用）。</li><li>**<code>getitem(self, key)</code>**实现索引或键访问（如 <code>obj[key]</code>）。</li><li>**<code>setitem(self, key, value)</code>**通过索引或键设置元素（如 <code>obj[key] = value</code>）。</li></ol><hr><h3 id="五、运算符重载" tabindex="-1"><a class="header-anchor" href="#五、运算符重载"><span>五、运算符重载</span></a></h3><ol><li><p><strong>算术运算</strong></p><ul><li><code>__add__(self, other)</code>：实现加法（<code>+</code>）‌</li><li><code>__sub__(self, other)</code>：实现减法（）‌</li><li><code>__mul__(self, other)</code>：实现乘法（）‌</li></ul></li><li><p><strong>比较运算</strong></p><ul><li><code>__eq__(self, other)</code>：等于判断（<code>==</code>）‌</li><li><code>__lt__(self, other)</code>：小于判断（<code>&lt;</code>）‌</li></ul></li></ol><hr><h3 id="六、特殊行为扩展" tabindex="-1"><a class="header-anchor" href="#六、特殊行为扩展"><span>六、特殊行为扩展</span></a></h3><ol><li><strong><code>call(self, ...)</code></strong></li><li>使实例可像函数一样调用（如 <code>obj()</code>）。</li><li>示例：</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Adder</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> </span>
<span class="line">__call__</span>
<span class="line"><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> a <span class="token operator">+</span> b</span>
<span class="line">add <span class="token operator">=</span> Adder<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><strong>上下文管理</strong></p><ul><li><code>__enter__(self)</code>：进入 <code>with</code> 代码块时调用</li><li><code>__exit__(self, ...)</code>：退出 <code>with</code> 代码块时调用（处理异常或资源释放）‌</li></ul></li><li><p><strong>迭代控制</strong></p><ul><li><code>__iter__(self)</code>：返回迭代器对象</li><li><code>__next__(self)</code>：控制迭代过程（支持 <code>for</code> 循环）‌</li></ul></li></ol><hr><h3 id="七、其他实用方法" tabindex="-1"><a class="header-anchor" href="#七、其他实用方法"><span>七、其他实用方法</span></a></h3><ol><li>**<code>slots</code>**限制实例可添加的属性（节省内存）。</li><li>**<code>del(self)</code>**对象销毁前调用（处理资源清理）。</li><li>**<code>dir(self)</code>**返回对象的公开属性和方法列表（增强 IDE 支持）。</li></ol><hr><h3 id="应用场景示例" tabindex="-1"><a class="header-anchor" href="#应用场景示例"><span>应用场景示例</span></a></h3><ul><li><strong>自定义数据结构</strong>‌：通过容器类方法（<code>getitem</code>、<code>len</code>）模拟列表或字典行为。</li><li><strong>运算符扩展</strong>‌：实现向量类的加减运算（<code>add</code>、<code>sub</code>）。</li><li><strong>装饰器逻辑</strong>‌：结合 <code>call</code> 方法创建状态保持的装饰器</li></ul>`,30)]))}const p=n(i,[["render",o]]),d=JSON.parse('{"path":"/Python/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html","title":"魔术方法","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"一、构造与初始化","slug":"一、构造与初始化","link":"#一、构造与初始化","children":[]},{"level":3,"title":"二、对象表示与格式化","slug":"二、对象表示与格式化","link":"#二、对象表示与格式化","children":[]},{"level":3,"title":"三、属性管理","slug":"三、属性管理","link":"#三、属性管理","children":[]},{"level":3,"title":"四、容器操作","slug":"四、容器操作","link":"#四、容器操作","children":[]},{"level":3,"title":"五、运算符重载","slug":"五、运算符重载","link":"#五、运算符重载","children":[]},{"level":3,"title":"六、特殊行为扩展","slug":"六、特殊行为扩展","link":"#六、特殊行为扩展","children":[]},{"level":3,"title":"七、其他实用方法","slug":"七、其他实用方法","link":"#七、其他实用方法","children":[]},{"level":3,"title":"应用场景示例","slug":"应用场景示例","link":"#应用场景示例","children":[]}],"git":{},"filePathRelative":"Python/魔术方法.md"}');export{p as comp,d as data};

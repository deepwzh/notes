import{_ as s,c as a,a as e,o as l}from"./app-CxmxnU5Q.js";const i={};function t(p,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="argo" tabindex="-1"><a class="header-anchor" href="#argo"><span>argo</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Argo CD 是用于 Kubernetes 的声明式 GitOps 持续交付工具。</p><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><ul><li><strong>遵循 GitOps 模式</strong>：以 Git 仓库作为定义所需应用程序状态的真实来源，将 Kubernetes 配置清单等存储在 Git 仓库中，通过对 Git 仓库的操作来管理应用程序的部署和更新。</li><li><strong>声明式部署</strong>：用户只需在 Git 仓库中声明应用程序的期望状态，Argo CD 会自动将应用程序部署到指定的目标环境中，确保实际运行状态与期望状态一致。</li></ul><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><ul><li><strong>Kubernetes 控制器</strong>：Argo CD 被实现为 Kubernetes 控制器，它持续监视正在运行的应用程序，将当前的活动状态与 Git 存储库中指定的所需目标状态进行比较。当已部署应用程序的运行状态偏离目标状态时，Argo CD 会将其视为 OutOfSync，并报告和可视化差异，同时提供自动或手动方式将实时状态同步回所需目标状态的功能。</li><li><strong>跟踪更新</strong>：应用程序部署可以跟踪 Git 提交时对分支、标签的更新，或固定到清单的特定版本，从而实现对应用程序版本的精确控制。</li></ul><h3 id="主要特性" tabindex="-1"><a class="header-anchor" href="#主要特性"><span>主要特性</span></a></h3><ul><li><strong>支持多种配置管理工具</strong>：支持原始的 k8s 配置、Kustomize、Helm、Jsonnet 等多种配置管理/模板工具，方便用户根据不同的项目需求选择合适的配置管理方式。</li><li><strong>多集群管理</strong>：能够管理和部署到多个集群，实现对多个 Kubernetes 集群的统一管理和应用程序部署。</li><li><strong>身份认证与授权</strong>：支持 SSO 集成，包括 OIDC、OAuth2、LDAP、SAML 2.0、GitHub、GitLab、Microsoft、LinkedIn 等，同时提供多租户和 RBAC 授权策略，确保系统的安全性和访问控制。</li><li><strong>自动配置漂移检测和可视化</strong>：可以自动检测应用程序配置的漂移情况，并通过 Web UI 进行可视化展示，让用户及时了解应用程序的状态变化。</li><li><strong>丰富的操作功能</strong>：提供自动或手动将应用程序同步到所需状态的功能，支持在任何地方回滚/滚动到 Git 存储库中提交的任何应用程序配置，还具备应用程序资源的健康状况分析、审核跟踪等功能。</li><li><strong>Web UI 和 CLI</strong>：提供 Web UI，提供应用程序活动的实时视图，方便用户进行可视化操作和管理；同时提供 CLI，用于自动化和 CI 集成，满足不同用户的操作需求。</li></ul><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><ul><li><strong>云原生应用部署</strong>：适用于云原生应用的持续交付，帮助开发团队快速、高效地将应用程序部署到 Kubernetes 集群中，并实现对应用程序生命周期的自动化管理。</li><li><strong>多环境部署</strong>：可以轻松管理不同环境（如开发、测试、生产等）中的应用程序部署，确保应用程序在各个环境中的一致性和稳定性。</li><li><strong>复杂应用部署</strong>：通过 PreSync、Sync、PostSync 钩子等功能，支持复杂的应用程序部署场景，如蓝/绿发布和金丝雀升级等，降低应用程序升级的风险。</li></ul><h2 id="application" tabindex="-1"><a class="header-anchor" href="#application"><span>Application</span></a></h2><p>Application（应用程序）是 Argo CD 中用于表示和管理部署到 Kubernetes 集群的应用的核心概念。</p><ol><li><strong>定义和配置</strong>：一个 Argo CD 的 Application 是通过 YAML 文件进行定义的，该文件描述了应用程序的基本信息，如名称、所在的命名空间、关联的 Git 仓库、目标 Kubernetes 集群、以及要部署的 Kubernetes 资源清单的路径等。例如：</li></ol><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> argoproj.io/v1alpha1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Application</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app</span>
<span class="line">    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> argocd</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">destination</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app<span class="token punctuation">-</span>namespace</span>
<span class="line">        <span class="token key atrule">server</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//my<span class="token punctuation">-</span>kubernetes<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>api<span class="token punctuation">-</span>server</span>
<span class="line">    <span class="token key atrule">source</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">path</span><span class="token punctuation">:</span> manifests/my<span class="token punctuation">-</span>app</span>
<span class="line">        <span class="token key atrule">repoURL</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/my<span class="token punctuation">-</span>org/my<span class="token punctuation">-</span>app<span class="token punctuation">-</span>repo.git</span>
<span class="line">        <span class="token key atrule">targetRevision</span><span class="token punctuation">:</span> main</span>
<span class="line">    <span class="token key atrule">project</span><span class="token punctuation">:</span> default</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述配置定义了一个名为 <code>my-app</code> 的应用程序，将部署到指定的 Kubernetes 集群的 <code>my-app-namespace</code> 命名空间中，应用程序的资源清单位于指定 Git 仓库的 <code>manifests/my-app</code> 路径下，并且跟踪 <code>main</code> 分支的最新更改。</p><ol><li><strong>同步和部署</strong>：一旦 Application 被创建并提交到 Argo CD，Argo CD 会定期检查关联的 Git 仓库，查看是否有新的更改。如果发现有更新，Argo CD 会自动将最新的资源清单应用到目标 Kubernetes 集群，实现应用程序的同步和部署。用户也可以手动触发同步操作，以立即应用最新的更改。</li><li><strong>状态监控和可视化</strong>：Argo CD 提供了直观的用户界面，用于监控 Application 的状态。用户可以查看应用程序的部署历史、当前状态（如是否已成功部署、是否存在错误等）、以及与目标状态的差异。Argo CD 还会显示每个 Kubernetes 资源的详细信息，帮助用户快速识别和解决问题。</li><li><strong>滚动更新和回滚</strong>：对于应用程序的更新，Argo CD 支持滚动更新策略，逐步将新版本的应用程序部署到集群中，同时监控应用的健康状况。如果在更新过程中出现问题，Argo CD 允许用户轻松地回滚到之前的版本，恢复应用程序的稳定状态。</li><li><strong>多环境管理</strong>：Argo CD 可以管理多个环境（如开发、测试、生产等）中的应用程序。通过在不同的 Application 配置中指定不同的目标集群和环境特定的配置，用户可以在不同环境之间轻松地推广应用程序，同时确保每个环境的配置和部署策略符合其特定需求。</li></ol><h3 id="使用多个应用源" tabindex="-1"><a class="header-anchor" href="#使用多个应用源"><span>使用多个应用源</span></a></h3><p>比如可以将 chart 和 values 文件分开</p><p><a href="https://argo-cd.readthedocs.io/en/latest/user-guide/multiple_sources/" target="_blank" rel="noopener noreferrer">多个应用源 - Argo CD - Kubernetes 的声明式 GitOps CD --- Multiple Sources for an Application - Argo CD - Declarative GitOps CD for Kubernetes</a></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">apiVersion: argoproj.io/v1alpha1</span>
<span class="line">kind: Application</span>
<span class="line">spec:</span>
<span class="line">  sources:</span>
<span class="line">  - repoURL: <span class="token string">&#39;https://prometheus-community.github.io/helm-charts&#39;</span></span>
<span class="line">    chart: prometheus</span>
<span class="line">    targetRevision: <span class="token number">15.7</span>.1</span>
<span class="line">    helm:</span>
<span class="line">      valueFiles:</span>
<span class="line">      - <span class="token variable">$values</span>/charts/prometheus/values.yaml</span>
<span class="line">  - repoURL: <span class="token string">&#39;https://git.example.com/org/value-files.git&#39;</span></span>
<span class="line">    targetRevision: dev</span>
<span class="line">    ref: values</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="子文档" tabindex="-1"><a class="header-anchor" href="#子文档"><span>子文档</span></a></h2><ul><li>[Argo cli用法](./Argo cli用法.md)</li></ul><h2 id="子文档-1" tabindex="-1"><a class="header-anchor" href="#子文档-1"><span>子文档</span></a></h2><ul><li>[Argo cli用法](./Argo cli用法.md)</li></ul><h2 id="子文档-2" tabindex="-1"><a class="header-anchor" href="#子文档-2"><span>子文档</span></a></h2><ul><li>[Argo cli用法](./Argo cli用法.md)</li></ul><h2 id="子文档-3" tabindex="-1"><a class="header-anchor" href="#子文档-3"><span>子文档</span></a></h2><ul><li>[Argo cli用法](./Argo cli用法.md)</li></ul>`,29)]))}const c=s(i,[["render",t]]),o=JSON.parse('{"path":"/%E4%BA%91%E5%8E%9F%E7%94%9F/argo/","title":"argo","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":3,"title":"主要特性","slug":"主要特性","link":"#主要特性","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}]},{"level":2,"title":"Application","slug":"application","link":"#application","children":[{"level":3,"title":"使用多个应用源","slug":"使用多个应用源","link":"#使用多个应用源","children":[]}]},{"level":2,"title":"子文档","slug":"子文档","link":"#子文档","children":[]},{"level":2,"title":"子文档","slug":"子文档-1","link":"#子文档-1","children":[]},{"level":2,"title":"子文档","slug":"子文档-2","link":"#子文档-2","children":[]},{"level":2,"title":"子文档","slug":"子文档-3","link":"#子文档-3","children":[]}],"git":{},"filePathRelative":"云原生/argo/README.md"}');export{c as comp,o as data};

import{_ as i,c as a,a as o,d as l,b as n,w as s,r as p,o as E,e as r}from"./app-EGhza7Qr.js";const h="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/static/HRaNbuFuTo1NoXx4Jsuc2iUmnNe.png",S="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/static/O8B9bfHQCoyrOQxTj8mcof3cnJd.png",d="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/static/GAK6bjkIyoX5V7xK5Wzcjj3InZ0.png",g="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/static/PNDXbi3BXoY7Ldx4eRBcH51dndb.png",c="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/static/HlyYb1GGNozIXnxvhPRco930nNh.png",u={};function T(B,e){const t=p("RouteLink");return E(),a("div",null,[e[12]||(e[12]=o('<h1 id="https" tabindex="-1"><a class="header-anchor" href="#https"><span>Https</span></a></h1><h1 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h1><p><strong>HTTPS</strong>（HyperText Transfer Protocol Secure）是 HTTP 的安全版本，用于在客户端和服务器之间安全传输数据。</p><p>它通过 SSL/TLS 协议对通信进行加密，确保数据的机密性和完整性。</p><h1 id="ssl-tls" tabindex="-1"><a class="header-anchor" href="#ssl-tls"><span>SSL/TLS</span></a></h1><p><strong>SSL</strong>（Secure Sockets Layer）和 <strong>TLS</strong>（Transport Layer Security）是用于在网络上加密通信的协议。SSL 是早期版本，TLS 是其继任者，目前广泛使用的是 TLS。</p><h2 id="版本演变" tabindex="-1"><a class="header-anchor" href="#版本演变"><span><strong>版本演变</strong></span></a></h2><ul><li><strong>SSL 1.0</strong>：未公开发布。</li><li><strong>SSL 2.0</strong>：1995 年发布，存在严重安全漏洞。</li><li><strong>SSL 3.0</strong>：1996 年发布，逐步被 TLS 取代。</li><li><strong>TLS 1.0</strong>：1999 年发布，基于 SSL 3.0。</li><li><strong>TLS 1.1</strong>：2006 年发布，修复了一些安全漏洞。</li><li><strong>TLS 1.2</strong>：2008 年发布，增加了更强的加密算法。</li><li><strong>TLS 1.3</strong>：2018 年发布，简化握手过程，提升安全性。可以支持 0-RTT</li></ul><h1 id="握手过程" tabindex="-1"><a class="header-anchor" href="#握手过程"><span>握手过程</span></a></h1><p>TLS 的握手流程如下所示</p><p><img src="'+h+'" alt=""></p><ul><li><p>TCP 三次握手</p></li><li><p>TLS 第一次握手</p><ul><li>客户端发起 ClientHello, 携带加密算法，客户端随机数，版本号，SessionID, SNI 等</li></ul></li><li><p>TLS 第二次握手</p><ul><li>服务端发起 ServerHello, 携带加密算法，服务端随机数，版本号，SessionID, SNI 等</li><li>服务端发送证书</li><li>服务端发送 ServerHelloDone</li></ul></li><li><p>TLS 第三次握手</p><ul><li>客户端生成 pre-master key, 用证书中的公钥加密发给服务端</li><li>客户端根据 pre-master-key, 客户端随机数，服务端随机数生成对称加密秘钥，此后会用这个秘钥通信</li><li>客户端发送 ChangeCipherSpec,表示之后要用这个新生成的秘钥通信</li></ul></li><li><p>TLS 第四次握手</p><ul><li>服务端根据 pre-master-key, 客户端随机数，服务端随机数生成对称加密秘钥，此后会用这个秘钥通信</li></ul></li></ul><h1 id="tls-抓包示例" tabindex="-1"><a class="header-anchor" href="#tls-抓包示例"><span>TLS 抓包示例</span></a></h1><h2 id="client-hello" tabindex="-1"><a class="header-anchor" href="#client-hello"><span>Client Hello</span></a></h2><p><img src="'+S+'" alt=""></p><h2 id="server-hello-certificate-server-key-exchange-server-hello-done" tabindex="-1"><a class="header-anchor" href="#server-hello-certificate-server-key-exchange-server-hello-done"><span>Server Hello + Certificate + Server Key Exchange + Server Hello Done</span></a></h2><p><img src="'+d+'" alt=""></p><p><img src="'+g+'" alt=""></p><h2 id="new-session-ticket-change-cipher-spec-encrypted-handshake-message" tabindex="-1"><a class="header-anchor" href="#new-session-ticket-change-cipher-spec-encrypted-handshake-message"><span>New Session Ticket + Change Cipher Spec + Encrypted Handshake Message</span></a></h2><p><img src="'+c+'" alt=""></p><p><a href="https://www.notion.so/TLS-JA3-154f5917927181cca343faf410894f00?pvs=21" target="_blank" rel="noopener noreferrer">TLS 指纹（JA3 指纹）</a></p><p><a href="https://www.notion.so/Client-Hello-154f591792718128823fdc7a2c4c50ca?pvs=21" target="_blank" rel="noopener noreferrer">Client Hello</a></p><p>TLS（传输层安全协议）从 1.0 到 1.3 版本经过了多次升级和改进，提升了安全性、性能和效率。以下是主要的改进：</p><ol><li><p><strong>安全性提升</strong>：</p><ul><li><strong>弃用不安全的加密算法和协议</strong>：在 TLS 1.1 和 TLS 1.2 中逐渐弃用了 MD5 和 SHA-1 等不再安全的哈希算法，TLS 1.3 完全移除了这些不安全算法。</li><li><strong>移除不安全的特性</strong>：TLS 1.3 移除了静态 RSA 和 Diffie-Hellman 密钥交换模式，采用更安全的前向保密算法。</li></ul></li><li><p><strong>握手协议改进</strong>：</p><ul><li><strong>简化握手过程</strong>：TLS 1.3 减少了握手过程中所需的往返次数，通常只需要一次往返时间（1-RTT），而 TLS 1.2 握手通常需要两次（2-RTT）。这大大减少了延迟。</li><li><strong>只支持基于 AEAD 的加密模式</strong>：这增强了加密的安全性和协议的灵活性。</li></ul></li><li><p><strong>会话恢复</strong>：</p><ul><li><strong>使用会话票据</strong>：TLS 1.3 更广泛地使用会话票据机制来实现会话恢复，无需在服务器端保留大量状态信息。</li></ul></li><li><p><strong>性能提升</strong>：</p><ul><li><strong>0-RTT 早期数据</strong>：TLS 1.3 引入了 0-RTT（Zero Round Trip Time）模式，允许客户端在握手的同时发送数据，从而减少初次连接的延迟。但需小心使用以防再发送（replay attack）攻击。</li></ul></li><li><p><strong>协议设计</strong>：</p><ul><li><strong>更简洁，更容易分析</strong>：TLS 1.3 的协议设计简化，使其更加一致和安全，减少了潜在的攻击面和实现的复杂度。</li></ul></li></ol><p>这些改进共同努力，使得 TLS 1.3 比之前的版本更安全、更高效，并且更适合现代互联网需求。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="noopener noreferrer">图解 SSL/TLS 协议 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><h2 id="子文档" tabindex="-1"><a class="header-anchor" href="#子文档"><span>子文档</span></a></h2>',28)),l("ul",null,[e[2]||(e[2]=l("li",null,"[Client Hello](./Client Hello.md)",-1)),l("li",null,[n(t,{to:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Https/SSL_TLS.html"},{default:s(()=>e[0]||(e[0]=[r("SSL_TLS")])),_:1})]),l("li",null,[n(t,{to:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Https/TLS%E6%8C%87%E7%BA%B9.html"},{default:s(()=>e[1]||(e[1]=[r("TLS指纹")])),_:1})])]),e[13]||(e[13]=l("h2",{id:"子文档-1",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#子文档-1"},[l("span",null,"子文档")])],-1)),l("ul",null,[e[5]||(e[5]=l("li",null,"[Client Hello](./Client Hello.md)",-1)),l("li",null,[n(t,{to:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Https/SSL_TLS.html"},{default:s(()=>e[3]||(e[3]=[r("SSL_TLS")])),_:1})]),l("li",null,[n(t,{to:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Https/TLS%E6%8C%87%E7%BA%B9.html"},{default:s(()=>e[4]||(e[4]=[r("TLS指纹")])),_:1})])]),e[14]||(e[14]=l("h2",{id:"子文档-2",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#子文档-2"},[l("span",null,"子文档")])],-1)),l("ul",null,[e[8]||(e[8]=l("li",null,"[Client Hello](./Client Hello.md)",-1)),l("li",null,[n(t,{to:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Https/SSL_TLS.html"},{default:s(()=>e[6]||(e[6]=[r("SSL_TLS")])),_:1})]),l("li",null,[n(t,{to:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Https/TLS%E6%8C%87%E7%BA%B9.html"},{default:s(()=>e[7]||(e[7]=[r("TLS指纹")])),_:1})])]),e[15]||(e[15]=l("h2",{id:"子文档-3",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#子文档-3"},[l("span",null,"子文档")])],-1)),l("ul",null,[e[11]||(e[11]=l("li",null,"[Client Hello](./Client Hello.md)",-1)),l("li",null,[n(t,{to:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Https/SSL_TLS.html"},{default:s(()=>e[9]||(e[9]=[r("SSL_TLS")])),_:1})]),l("li",null,[n(t,{to:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Https/TLS%E6%8C%87%E7%BA%B9.html"},{default:s(()=>e[10]||(e[10]=[r("TLS指纹")])),_:1})])])])}const L=i(u,[["render",T]]),C=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Https/","title":"Https","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"版本演变","slug":"版本演变","link":"#版本演变","children":[]},{"level":2,"title":"Client Hello","slug":"client-hello","link":"#client-hello","children":[]},{"level":2,"title":"Server Hello + Certificate + Server Key Exchange + Server Hello Done","slug":"server-hello-certificate-server-key-exchange-server-hello-done","link":"#server-hello-certificate-server-key-exchange-server-hello-done","children":[]},{"level":2,"title":"New Session Ticket + Change Cipher Spec + Encrypted Handshake Message","slug":"new-session-ticket-change-cipher-spec-encrypted-handshake-message","link":"#new-session-ticket-change-cipher-spec-encrypted-handshake-message","children":[]},{"level":2,"title":"子文档","slug":"子文档","link":"#子文档","children":[]},{"level":2,"title":"子文档","slug":"子文档-1","link":"#子文档-1","children":[]},{"level":2,"title":"子文档","slug":"子文档-2","link":"#子文档-2","children":[]},{"level":2,"title":"子文档","slug":"子文档-3","link":"#子文档-3","children":[]}],"git":{},"filePathRelative":"计算机网络/Https/README.md"}');export{L as comp,C as data};

import{_ as a,c as e,a as s,o as i}from"./app-C5hxq_gh.js";const l={};function c(d,n){return i(),e("div",null,n[0]||(n[0]=[s(`<h1 id="cmake-集成-conan" tabindex="-1"><a class="header-anchor" href="#cmake-集成-conan"><span>cmake 集成 conan</span></a></h1><h3 id="conan-安装步骤" tabindex="-1"><a class="header-anchor" href="#conan-安装步骤"><span>Conan 安装步骤</span></a></h3><p>Conan 是一个用于 C 和 C++ 的开源包管理器，以下是其安装步骤：</p><h4 id="_1-安装-python" tabindex="-1"><a class="header-anchor" href="#_1-安装-python"><span>1. 安装 Python</span></a></h4><p>Conan 是基于 Python 开发的，所以首先要确保你的系统安装了 Python 3.6 及以上版本。你可以从 <a href="https://www.python.org/downloads/" target="_blank" rel="noopener noreferrer">Python 官方网站</a> 下载并安装。</p><h4 id="_2-安装-conan" tabindex="-1"><a class="header-anchor" href="#_2-安装-conan"><span>2. 安装 Conan</span></a></h4><p>安装好 Python 之后，你可以通过 <code>pip</code> 来安装 Conan：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">pip <span class="token function">install</span> conan</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-验证安装" tabindex="-1"><a class="header-anchor" href="#_3-验证安装"><span>3. 验证安装</span></a></h4><p>安装完成后，你可以通过以下命令来验证 Conan 是否安装成功：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">conan <span class="token parameter variable">--version</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果安装成功，会显示 Conan 的版本信息。</p><h3 id="cmake-集成-conan-1" tabindex="-1"><a class="header-anchor" href="#cmake-集成-conan-1"><span>CMake 集成 Conan</span></a></h3><h4 id="_1-创建-conanfile-txt-文件" tabindex="-1"><a class="header-anchor" href="#_1-创建-conanfile-txt-文件"><span>1. 创建 <code>conanfile.txt</code> 文件</span></a></h4><p>在项目根目录下创建一个 <code>conanfile.txt</code> 文件，在其中指定项目所需的依赖项。示例如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">[requires]</span>
<span class="line"># 这里指定你需要的库，例如 Boost</span>
<span class="line">boost/1.76.0</span>
<span class="line">[generators]</span>
<span class="line">cmake_find_package</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>[requires]</code> 部分列出了你项目所需的依赖项，<code>[generators]</code> 部分指定了 Conan 生成的文件类型，<code>cmake_find_package</code> 表示生成适合 CMake 使用的 <code>FindXXX.cmake</code> 文件。</p><h4 id="_2-运行-conan-安装依赖" tabindex="-1"><a class="header-anchor" href="#_2-运行-conan-安装依赖"><span>2. 运行 Conan 安装依赖</span></a></h4><p>在项目根目录下运行以下命令来安装依赖：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">conan <span class="token function">install</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--build</span><span class="token operator">=</span>missing</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此命令会根据 <code>conanfile.txt</code> 中的配置下载并安装所需的依赖项。<code>--build=missing</code> 表示如果某个依赖项缺失，Conan 会尝试构建它。</p><h4 id="_3-cmake-配置" tabindex="-1"><a class="header-anchor" href="#_3-cmake-配置"><span>3. CMake 配置</span></a></h4><p>在 CMake 中集成 Conan，需要在 <code>CMakeLists.txt</code> 文件中进行一些配置。示例如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">cmake_minimum_required(VERSION 3.15)</span>
<span class="line">project(MyProject)</span>
<span class="line"># 设置 CMake 模块路径，包含 Conan 生成的 FindXXX.cmake 文件</span>
<span class="line">set(CMAKE_MODULE_PATH \${CMAKE_BINARY_DIR} \${CMAKE_MODULE_PATH})</span>
<span class="line">set(CMAKE_PREFIX_PATH \${CMAKE_BINARY_DIR} \${CMAKE_PREFIX_PATH})</span>
<span class="line"># 包含 Conan 生成的配置文件</span>
<span class="line">include(\${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)</span>
<span class="line">conan_basic_setup()</span>
<span class="line"># 添加可执行文件</span>
<span class="line">add_executable(MyExecutable main.cpp)</span>
<span class="line"># 链接依赖库</span>
<span class="line">target_link_libraries(MyExecutable \${CONAN_LIBS})</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上 <code>CMakeLists.txt</code> 文件的主要步骤如下：</p><ul><li><code>set(CMAKE_MODULE_PATH ...)</code> 和 <code>set(CMAKE_PREFIX_PATH ...)</code>：设置 CMake 模块路径，以便 CMake 能够找到 Conan 生成的 <code>FindXXX.cmake</code> 文件。</li><li><code>include(\${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)</code>：包含 Conan 生成的配置文件。</li><li><code>conan_basic_setup()</code>：调用该函数来设置 CMake 的一些变量，例如 <code>CONAN_LIBS</code>，它包含了所有依赖库的名称。</li><li><code>target_link_libraries(MyExecutable \${CONAN_LIBS})</code>：将依赖库链接到你的可执行文件。</li></ul><h4 id="_4-构建项目" tabindex="-1"><a class="header-anchor" href="#_4-构建项目"><span>4. 构建项目</span></a></h4><p>完成上述配置后，就可以使用 CMake 来构建项目了：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">mkdir</span> build</span>
<span class="line"><span class="token builtin class-name">cd</span> build</span>
<span class="line">cmake <span class="token punctuation">..</span></span>
<span class="line">cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这些步骤，你就可以将 Conan 集成到 CMake 项目中，方便地管理项目的依赖项。</p>`,30)]))}const r=a(l,[["render",c]]),o=JSON.parse('{"path":"/Cpp/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/Cmake/cmake%E9%9B%86%E6%88%90conan.html","title":"cmake 集成 conan","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"Conan 安装步骤","slug":"conan-安装步骤","link":"#conan-安装步骤","children":[]},{"level":3,"title":"CMake 集成 Conan","slug":"cmake-集成-conan-1","link":"#cmake-集成-conan-1","children":[]}],"git":{},"filePathRelative":"Cpp/构建工具/Cmake/cmake集成conan.md"}');export{r as comp,o as data};

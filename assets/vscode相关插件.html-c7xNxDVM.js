import{_ as s,c as n,a,o as i}from"./app-bElOgxFi.js";const l="/wiki/Cpp/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vscode/static/LxFibxHsVoxqkpxdt3ZcgOv6nVd.webp",o="/wiki/Cpp/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vscode/static/FQEFbOhvRofFM6xtuUbcSkM5n0g.webp",c={};function d(t,e){return i(),n("div",null,e[0]||(e[0]=[a('<h1 id="vscode-相关插件" tabindex="-1"><a class="header-anchor" href="#vscode-相关插件"><span>vscode 相关插件</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p><code>vscode</code> + <code>cmake</code> 可以实现 C/C++ 项目开发和构建。可以在 vscode 上装以下几个插件：</p><ul><li>C/C++</li><li>CMake</li><li>CMake Tools</li></ul><p><img src="'+l+`" alt=""></p><h2 id="c-c" tabindex="-1"><a class="header-anchor" href="#c-c"><span>C/C++</span></a></h2><p>这个插件是微软的 C/C++ 的官方 lsp 服务器，还具有调试的功能，详细文档见：<a href="https://code.visualstudio.com/docs/languages/cpp" target="_blank" rel="noopener noreferrer">https://code.visualstudio.com/docs/languages/cpp</a></p><h3 id="代码提示" tabindex="-1"><a class="header-anchor" href="#代码提示"><span>代码提示</span></a></h3><p>对于简单的项目，代码提示开箱即用，但对于复杂的项目，要实现精准的代码提示，一般需要指定 compile_commands.json。</p><p>compile_commands.json 可以手动在配置中指定</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">{</span>
<span class="line">  &quot;configurations&quot;: [</span>
<span class="line">      {</span>
<span class="line">          &quot;name&quot;: &quot;Linux&quot;,</span>
<span class="line">          &quot;includePath&quot;: [],</span>
<span class="line">          &quot;defines&quot;: [],</span>
<span class="line">          &quot;compilerPath&quot;: &quot;/usr/bin/g++&quot;,</span>
<span class="line">          &quot;cStandard&quot;: &quot;gnu11&quot;,</span>
<span class="line">          &quot;cppStandard&quot;: &quot;gnu++14&quot;,</span>
<span class="line">          &quot;intelliSenseMode&quot;: &quot;gcc-x64&quot;,</span>
<span class="line">          &quot;compileCommands&quot;: &quot;~/hello/build/compile_commands.json&quot;</span>
<span class="line">      }</span>
<span class="line">  ],</span>
<span class="line">  &quot;version&quot;: 4</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以直接借助 CMake Tools 等配置方自动注入。详见后边的章节。</p><p>后边也会具体讲一下 compile_commands.json 的生成方式。</p><h3 id="调试" tabindex="-1"><a class="header-anchor" href="#调试"><span>调试</span></a></h3><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><p><code>c_cpp_properties.json</code> 存放其配置</p><p>常用的一些选项</p><ul><li><code>configurationProvider</code>：</li></ul><blockquote><p>可以为源文件提供 IntelliSense 配置信息的 VS Code 扩展的 ID。例如，使用 VS Code 扩展 ID“ms-vscode.cmake-tools”从 CMake Tools 扩展提供配置信息。</p></blockquote><ul><li><code>compileCommands</code>：</li></ul><blockquote><p>工作区中 compile_commands.json 文件的完整路径。此文件中发现的包含路径和定义将替代为 includePath 和 defines 设置中设置的值。如果编译命令数据库中没有与在编辑器中打开的文件对应的翻译单元条目，则会出现警告消息，并且扩展将使用 includePath 和 defines 设置。</p></blockquote><h2 id="compile-commands-json" tabindex="-1"><a class="header-anchor" href="#compile-commands-json"><span>compile_commands.json</span></a></h2><p>compile_commands.json 是编译的数据库文件（<a href="https://clang.llvm.org/docs/JSONCompilationDatabase.html" target="_blank" rel="noopener noreferrer">https://clang.llvm.org/docs/JSONCompilationDatabase.html</a>），里面存放了所有编译的命令，可以用来代码提示</p><p>一般来说指定了 cmake 插件，会自动去特定的位置寻找这个文件。</p><h3 id="生成" tabindex="-1"><a class="header-anchor" href="#生成"><span>生成</span></a></h3><p><code>cmake</code> 可以用于生成 <code>compile_commands.json</code>，只需要在运行 <code>cmake</code> 时添加参数 <code>DCMAKE_EXPORT_COMPILE_COMMANDS=True</code> 或者在 CMakeLists.txt 中添加 <code>set(CMAKE_EXPORT_COMPILE_COMMANDS True)</code>。</p><p>例子：假设在 <code>~</code> 目录下有一个 hello 的项目</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">cd ~/hello</span>
<span class="line">mkdir build</span>
<span class="line">cd build</span>
<span class="line">cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=True ..</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会在 <code>~/hello/build</code> 下生成 <code>compile_commands.json</code>。</p><p>详细文档见：<a href="https://cmake.org/cmake/help/latest/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html" target="_blank" rel="noopener noreferrer">https://cmake.org/cmake/help/latest/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html</a></p><h3 id="配置-1" tabindex="-1"><a class="header-anchor" href="#配置-1"><span>配置</span></a></h3><p>生成后，在 vscode 中打开 <code>~/hello</code> 目录，配置 <code>.vscode/c_cpp_properties.json</code>。指定 <code>compileCommands</code> 为上一步的 <code>~/hello/build/compile_commands.json</code>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">{</span>
<span class="line">  &quot;configurations&quot;: [</span>
<span class="line">      {</span>
<span class="line">          &quot;name&quot;: &quot;Linux&quot;,</span>
<span class="line">          &quot;includePath&quot;: [],</span>
<span class="line">          &quot;defines&quot;: [],</span>
<span class="line">          &quot;compilerPath&quot;: &quot;/usr/bin/g++&quot;,</span>
<span class="line">          &quot;cStandard&quot;: &quot;gnu11&quot;,</span>
<span class="line">          &quot;cppStandard&quot;: &quot;gnu++14&quot;,</span>
<span class="line">          &quot;intelliSenseMode&quot;: &quot;gcc-x64&quot;,</span>
<span class="line">          &quot;compileCommands&quot;: &quot;~/hello/build/compile_commands.json&quot;</span>
<span class="line">      }</span>
<span class="line">  ],</span>
<span class="line">  &quot;version&quot;: 4</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过配置 <code>configurationProvider</code>，让 cmake 插件自动修改这个字段。</p><h2 id="cmake-tools" tabindex="-1"><a class="header-anchor" href="#cmake-tools"><span>CMake Tools</span></a></h2><p><code>CMake Tools插件</code> 能够给 <code>C/C++插件</code> 提供信息，实现 IntelliSense、代码补全、注释浏览、文件转跳等功能。</p><p>CMake Tools 可以作为 C/C++ 插件的配置提供者，这样就不用自己指定 <code>.vscode/c_cpp_properties.json</code> 的 <code>includePath</code> 和 <code>defines</code>。</p><h3 id="作为-c-c-的-configurationprovider" tabindex="-1"><a class="header-anchor" href="#作为-c-c-的-configurationprovider"><span>作为 C/C++ 的 configurationProvider</span></a></h3><p>具体可以通过以下两种方式去修改。</p><p>在当前工作目录的 <code>.vscode/settings.json</code> 文件（即当前工作目录的设置文件，会覆盖用户设置文件）中添加：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">{</span>
<span class="line">    &quot;C_Cpp.default.configurationProvider&quot;: &quot;ms-vscode.cmake-tools&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般在第一次使用 <code>CMake Tools插件</code> 时会出现如下提示：</p><p><img src="`+o+`" alt=""></p><p>Allow 之后会自动写入这个文件</p><p>当然，也可以在 <code>C/C++插件</code> 的配置文件 <code>.vscode/c_cpp_properties.json</code> 中手动指定 <code>configurationProvider</code>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">{</span>
<span class="line">    &quot;configurations&quot;: [</span>
<span class="line">        {</span>
<span class="line">            &quot;name&quot;: &quot;Linux&quot;,</span>
<span class="line">            &quot;includePath&quot;: [],</span>
<span class="line">            &quot;defines&quot;: [],</span>
<span class="line">            &quot;compilerPath&quot;: &quot;/usr/bin/gcc&quot;,</span>
<span class="line">            &quot;cStandard&quot;: &quot;gnu11&quot;,</span>
<span class="line">            &quot;cppStandard&quot;: &quot;gnu++14&quot;,</span>
<span class="line">            &quot;intelliSenseMode&quot;: &quot;gcc-x64&quot;,</span>
<span class="line">            &quot;configurationProvider&quot;: &quot;ms-vscode.cmake-tools&quot;</span>
<span class="line">        }</span>
<span class="line">    ],</span>
<span class="line">    &quot;version&quot;: 4</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置的详细文档见：</p><p><a href="https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference" target="_blank" rel="noopener noreferrer">https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference</a></p><p><a href="https://code.visualstudio.com/docs/cpp/customize-default-settings-cpp" target="_blank" rel="noopener noreferrer">https://code.visualstudio.com/docs/cpp/customize-default-settings-cpp</a></p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://code.visualstudio.com/docs/cpp/cmake-linux" target="_blank" rel="noopener noreferrer">https://code.visualstudio.com/docs/cpp/cmake-linux</a></p><p><a href="https://code.visualstudio.com/docs/cpp/configure-intellisense-crosscompilation" target="_blank" rel="noopener noreferrer">https://code.visualstudio.com/docs/cpp/configure-intellisense-crosscompilation</a></p>`,52)]))}const r=s(c,[["render",d]]),u=JSON.parse('{"path":"/Cpp/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vscode/vscode%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6.html","title":"vscode 相关插件","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"C/C++","slug":"c-c","link":"#c-c","children":[{"level":3,"title":"代码提示","slug":"代码提示","link":"#代码提示","children":[]},{"level":3,"title":"调试","slug":"调试","link":"#调试","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]}]},{"level":2,"title":"compile_commands.json","slug":"compile-commands-json","link":"#compile-commands-json","children":[{"level":3,"title":"生成","slug":"生成","link":"#生成","children":[]},{"level":3,"title":"配置","slug":"配置-1","link":"#配置-1","children":[]}]},{"level":2,"title":"CMake Tools","slug":"cmake-tools","link":"#cmake-tools","children":[{"level":3,"title":"作为 C/C++ 的 configurationProvider","slug":"作为-c-c-的-configurationprovider","link":"#作为-c-c-的-configurationprovider","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{},"filePathRelative":"Cpp/开发工具/Vscode/vscode相关插件.md"}');export{r as comp,u as data};
